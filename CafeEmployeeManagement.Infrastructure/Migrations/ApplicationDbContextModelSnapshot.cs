// <auto-generated />
using System;
using CafeEmployeeManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CafeEmployeeManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CafeEmployeeManagement.Domain.Entities.Cafe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Cafes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb93d19a-4019-4770-b4f5-5787bd3e7da7"),
                            CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Coffe heaven",
                            Location = "123 Orchid Avenue, #05-67, Singapore 567890",
                            Logo = "/img/brew_heaven.jpg",
                            Name = "Brew Heaven",
                            UpdatedDate = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("3e58d4dd-3d2a-422f-a4c0-e13758fdc7ef"),
                            CreatedDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Amazing coffe cafe",
                            Location = "45 Merlion Lane, #12-34, Singapore 098765",
                            Logo = "/img/mocha_muse.jpg",
                            Name = "Mocha Muse",
                            UpdatedDate = new DateTime(2010, 2, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("CafeEmployeeManagement.Domain.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Guid>("CafeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CafeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = "UIAbcDEfg",
                            CafeId = new Guid("cb93d19a-4019-4770-b4f5-5787bd3e7da7"),
                            CreatedDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "john.doe@example.com",
                            Gender = 1,
                            Name = "John Doe",
                            PhoneNumber = 98881111,
                            UpdatedDate = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = "UIArfDEfg",
                            CafeId = new Guid("cb93d19a-4019-4770-b4f5-5787bd3e7da7"),
                            CreatedDate = new DateTime(2020, 4, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "jane.doe@example.com",
                            Gender = 2,
                            Name = "Jane Doe",
                            PhoneNumber = 98881221,
                            UpdatedDate = new DateTime(2020, 5, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = "UIBrfrEfg",
                            CafeId = new Guid("3e58d4dd-3d2a-422f-a4c0-e13758fdc7ef"),
                            CreatedDate = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "steve.smith@example.com",
                            Gender = 1,
                            Name = "Steve Smith",
                            PhoneNumber = 88855221,
                            UpdatedDate = new DateTime(2015, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("CafeEmployeeManagement.Domain.Entities.Employee", b =>
                {
                    b.HasOne("CafeEmployeeManagement.Domain.Entities.Cafe", "Cafe")
                        .WithMany("Employees")
                        .HasForeignKey("CafeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cafe");
                });

            modelBuilder.Entity("CafeEmployeeManagement.Domain.Entities.Cafe", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
